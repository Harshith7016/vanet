//
// Generated file, do not edit! Created by nedtool 5.0 from messages/Car2XMessage.msg.
//

#ifndef __CAR2XMESSAGE_M_H
#define __CAR2XMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "veins/modules/messages/WaveShortMessage_m.h"
// }}

/**
 * Class generated from <tt>messages/Car2XMessage.msg:7</tt> by nedtool.
 * <pre>
 * packet Car2XMessage extends WaveShortMessage
 * {
 *     simtime_t creationTime;
 *     Coord originPosition;
 *     int hops;
 *     unsigned long unique_id;
 *     bool monitorMsg = false;
 *     double maxTravelledDistance = 0;
 *     bool virus = false;
 * }
 * </pre>
 */
class Car2XMessage : public ::WaveShortMessage
{
  protected:
    ::omnetpp::simtime_t creationTime;
    Coord originPosition;
    int hops;
    unsigned long unique_id;
    bool monitorMsg;
    double maxTravelledDistance;
    bool virus;

  private:
    void copy(const Car2XMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Car2XMessage&);

  public:
    Car2XMessage(const char *name=nullptr, int kind=0);
    Car2XMessage(const Car2XMessage& other);
    virtual ~Car2XMessage();
    Car2XMessage& operator=(const Car2XMessage& other);
    virtual Car2XMessage *dup() const {return new Car2XMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual ::omnetpp::simtime_t getCreationTime() const;
    virtual void setCreationTime(::omnetpp::simtime_t creationTime);
    virtual Coord& getOriginPosition();
    virtual const Coord& getOriginPosition() const {return const_cast<Car2XMessage*>(this)->getOriginPosition();}
    virtual void setOriginPosition(const Coord& originPosition);
    virtual int getHops() const;
    virtual void setHops(int hops);
    virtual unsigned long getUnique_id() const;
    virtual void setUnique_id(unsigned long unique_id);
    virtual bool getMonitorMsg() const;
    virtual void setMonitorMsg(bool monitorMsg);
    virtual double getMaxTravelledDistance() const;
    virtual void setMaxTravelledDistance(double maxTravelledDistance);
    virtual bool getVirus() const;
    virtual void setVirus(bool virus);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Car2XMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Car2XMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CAR2XMESSAGE_M_H

